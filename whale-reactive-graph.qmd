---
title: "Avoid redundances: the reactive graph"
---

```{r, include=FALSE}
eval_things <- FALSE
```

We modified the server of App 1 as follows:

```{r}
#| code-fold: true
#| eval: false

server2 <- function(input, output, session) {
  # rc.data: read data ------------------------------------------------------
  rc.data <- reactive({
    download_and_read(input$date)
  }) |>
    bindCache(input$date) |>
    bindEvent(input$date)

  # Tab 1: All traffic ------------------------------------------------------
  # rc.count: simple counting -----------------------------------------------
  rc.count <- reactive({
    calc_count_downloads(rc.data())
  }) |>
    bindCache(input$date)

  # rc.whales: separate the whales ------------------------------------------
  rc.whales <- reactive({
    create_ip_names(rc.count(), input$n_whales)
  }) |>
    bindCache(input$date, input$n_whales)

  rc.whales_vs_non_whales_by_hour <- reactive({
    calc_whales_vs_non_whales_by_hour(df = rc.data(), whale_ip = rc.whales()$ip_id)
  }) |>
    bindCache(input$date, input$n_whales)

  # rc.valueboxes ------------------------------------------------------------
  rc.valuebox1 <- reactive({
    calc_valuebox_size(rc.data())
  })

  rc.valuebox2 <- reactive({
    calc_valuebox_rows(rc.data())
  })

  rc.valuebox3 <- reactive({
    calc_valuebox_unique_ids(rc.data())
  })

  # Tab 2: Biggest whales ---------------------------------------------------
  # reuse rc.whales


  # Tab 3: Whales by hour ---------------------------------------------------
  # rc.downloads_by_hour_with_names -----------------------------------------
  rc.downloads_by_hour_with_names <- reactive({
    calc_whales_by_hour(rc.data(), rc.whales())
  }) |>
    bindCache(input$date, input$n_whales)


  # Tab 4: Detail view ------------------------------------------------------
  # uses rc.data and rc.whales

  # modules -----------------------------------------------------------------
  md1.all_traffic_server(
    rc.valuebox1 = rc.valuebox1, rc.valuebox2 = rc.valuebox2, rc.valuebox3 = rc.valuebox3,
    rc.whales_vs_non_whales_by_hour = rc.whales_vs_non_whales_by_hour
  )

  md1.biggest_whales_server(rc.biggest_whales = rc.whales)
  md1.whales_by_hour_server(rc.downloads_by_hour_with_names = rc.downloads_by_hour_with_names)
  md2.detail_view_server(rc.data = rc.data, rc.whales = rc.whales)
}
```

<!-- Check if I need add cache in the other mods -->

We also cached the plots, for example in the last module:

```r
!!!
```


We run `run_app2()` and see that only the first running of a given function is really calculated; the rest is cached. 

### Some key points when using `bindCache`

- The cache key can't be too big. Using the entire `rc.data()` would be slow. Since there is a bijection between days and rc.data, we can use solely the date.

::: {.callout-note title="`bindCache` docs"}
To compute the cache key, bindCache() hashes the contents of ..., so it's best to avoid including large objects in a cache key since that can result in slow hashing. It's also best to avoid reference objects like environments and R6 objects, since the serialization of these objects may not capture relevant changes.

If you want to use a large object as part of a cache key, it may make sense to do some sort of reduction on the data that still captures information about whether a value can be retrieved from the cache. For example, if you have a large data set with timestamps, it might make sense to extract the most recent timestamp and return that. Then, instead of hashing the entire data object, the cached reactive only needs to hash the timestamp.

```r
r <- reactive({ compute(bigdata()) } %>%
  bindCache({ extract_most_recent_time(bigdata()) })
```
:::

- Saving a big object in the disk takes time! The first time we read a file, a copy of `rc.data` is going to be saved as a RDS file in the `myapp-cache` dir. This can take some seconds to finish.

- We are using `shinyOptions(cache = cachem::cache_disk("./myapp-cache", max_size = 1024 * 1024^2, logfile = stdout(), evict = "lru"))` as the caching options. This means that the cache will be saved on disk so all users (even in different sessions) can access the cache. The files will be saved up to 1GB and then the least used will be deleted.